import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
let TranslateService = class TranslateService {
    constructor() {
        this.lang = {
            'fr': {
                'GO': `C'est parti`,
                'SEND': 'Envoyer',
                'SELECT': 'Vous devez sélectionner une réponse',
                'MONDAY': 'Lundi',
                "TUESDAY": 'Mardi',
                "WEDNESDAY": 'Mercredi',
                "THURSDAY": 'Jeudi',
                "FRIDAY": 'Vendredi',
                "SATURDAY": 'Samedi',
                "SUNDAY": 'Dimanche',
                "OTHER": "Autre",
                "FREE_FIELD": 'Champ libre',
                "VALIDATE": 'Valider',
                "SKIP": 'Passer',
                "MORNING": "Matin",
                "AFTERNOON": "Après-midi",
                "MORNING_ALL": 'Matin (tous)',
                "AFTERNOON_ALL": 'Après-midi (tous)',
            },
            'en': {
                'GO': `Let's go`,
                'SEND': 'Send',
                'SELECT': 'You must select an answer',
                'MONDAY': 'Monday',
                "TUESDAY": 'Tuesday',
                "WEDNESDAY": 'Wednesday',
                "THURSDAY": 'Thursday',
                "FRIDAY": 'Friday',
                "SATURDAY": 'Saturday',
                "SUNDAY": 'Sunday',
                "OTHER": 'Other',
                "FREE_FIELD": 'Free field',
                "VALIDATE": 'Validate',
                "SKIP": 'Skip',
                "MORNING": "Morning",
                "AFTERNOON": "Afternoon",
                "MORNING_ALL": 'Morning (all)',
                "AFTERNOON_ALL": 'Afternoon (all)',
            }
        };
    }
    translate(l, word) {
        return this.lang[l][word];
    }
};
TranslateService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TranslateService_Factory() { return new TranslateService(); }, token: TranslateService, providedIn: "root" });
TranslateService = __decorate([
    Injectable({
        providedIn: 'root'
    })
], TranslateService);
export { TranslateService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9rb252ZXJzby8iLCJzb3VyY2VzIjpbImxpYi90cmFuc2xhdGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFLM0MsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7SUE0QzNCO1FBM0NRLFNBQUksR0FBRztZQUNYLElBQUksRUFBRTtnQkFDRixJQUFJLEVBQUUsYUFBYTtnQkFDbkIsTUFBTSxFQUFFLFNBQVM7Z0JBQ2pCLFFBQVEsRUFBRSxxQ0FBcUM7Z0JBQy9DLFFBQVEsRUFBRSxPQUFPO2dCQUNqQixTQUFTLEVBQUUsT0FBTztnQkFDbEIsV0FBVyxFQUFFLFVBQVU7Z0JBQ3ZCLFVBQVUsRUFBRSxPQUFPO2dCQUNuQixRQUFRLEVBQUUsVUFBVTtnQkFDcEIsVUFBVSxFQUFFLFFBQVE7Z0JBQ3BCLFFBQVEsRUFBRSxVQUFVO2dCQUNwQixPQUFPLEVBQUUsT0FBTztnQkFDaEIsWUFBWSxFQUFFLGFBQWE7Z0JBQzNCLFVBQVUsRUFBRSxTQUFTO2dCQUNyQixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsU0FBUyxFQUFFLE9BQU87Z0JBQ2xCLFdBQVcsRUFBRSxZQUFZO2dCQUN6QixhQUFhLEVBQUUsY0FBYztnQkFDN0IsZUFBZSxFQUFFLG1CQUFtQjthQUN2QztZQUNELElBQUksRUFBRTtnQkFDRixJQUFJLEVBQUUsVUFBVTtnQkFDaEIsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLFNBQVMsRUFBRSxTQUFTO2dCQUNwQixXQUFXLEVBQUUsV0FBVztnQkFDeEIsVUFBVSxFQUFFLFVBQVU7Z0JBQ3RCLFFBQVEsRUFBRSxRQUFRO2dCQUNsQixVQUFVLEVBQUUsVUFBVTtnQkFDdEIsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixZQUFZLEVBQUUsWUFBWTtnQkFDMUIsVUFBVSxFQUFFLFVBQVU7Z0JBQ3RCLE1BQU0sRUFBRSxNQUFNO2dCQUNkLFNBQVMsRUFBRSxTQUFTO2dCQUNwQixXQUFXLEVBQUUsV0FBVztnQkFDeEIsYUFBYSxFQUFFLGVBQWU7Z0JBQzlCLGVBQWUsRUFBRSxpQkFBaUI7YUFDckM7U0FDSixDQUFBO0lBRWUsQ0FBQztJQUVWLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSTtRQUN0QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQztDQUNGLENBQUE7O0FBakRZLGdCQUFnQjtJQUg1QixVQUFVLENBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDO0dBQ1csZ0JBQWdCLENBaUQ1QjtTQWpEWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRyYW5zbGF0ZVNlcnZpY2Uge1xuICBwcml2YXRlIGxhbmcgPSB7XG4gICAgICAnZnInOiB7XG4gICAgICAgICAgJ0dPJzogYEMnZXN0IHBhcnRpYCxcbiAgICAgICAgICAnU0VORCc6ICdFbnZveWVyJyxcbiAgICAgICAgICAnU0VMRUNUJzogJ1ZvdXMgZGV2ZXogc8OpbGVjdGlvbm5lciB1bmUgcsOpcG9uc2UnLFxuICAgICAgICAgICdNT05EQVknOiAnTHVuZGknLFxuICAgICAgICAgIFwiVFVFU0RBWVwiOiAnTWFyZGknLFxuICAgICAgICAgIFwiV0VETkVTREFZXCI6ICdNZXJjcmVkaScsXG4gICAgICAgICAgXCJUSFVSU0RBWVwiOiAnSmV1ZGknLFxuICAgICAgICAgIFwiRlJJREFZXCI6ICdWZW5kcmVkaScsXG4gICAgICAgICAgXCJTQVRVUkRBWVwiOiAnU2FtZWRpJyxcbiAgICAgICAgICBcIlNVTkRBWVwiOiAnRGltYW5jaGUnLFxuICAgICAgICAgIFwiT1RIRVJcIjogXCJBdXRyZVwiLFxuICAgICAgICAgIFwiRlJFRV9GSUVMRFwiOiAnQ2hhbXAgbGlicmUnLFxuICAgICAgICAgIFwiVkFMSURBVEVcIjogJ1ZhbGlkZXInLFxuICAgICAgICAgIFwiU0tJUFwiOiAnUGFzc2VyJyxcbiAgICAgICAgICBcIk1PUk5JTkdcIjogXCJNYXRpblwiLFxuICAgICAgICAgIFwiQUZURVJOT09OXCI6IFwiQXByw6hzLW1pZGlcIixcbiAgICAgICAgICBcIk1PUk5JTkdfQUxMXCI6ICdNYXRpbiAodG91cyknLFxuICAgICAgICAgIFwiQUZURVJOT09OX0FMTFwiOiAnQXByw6hzLW1pZGkgKHRvdXMpJyxcbiAgICAgIH0sXG4gICAgICAnZW4nOiB7XG4gICAgICAgICAgJ0dPJzogYExldCdzIGdvYCxcbiAgICAgICAgICAnU0VORCc6ICdTZW5kJyxcbiAgICAgICAgICAnU0VMRUNUJzogJ1lvdSBtdXN0IHNlbGVjdCBhbiBhbnN3ZXInLFxuICAgICAgICAgICdNT05EQVknOiAnTW9uZGF5JyxcbiAgICAgICAgICBcIlRVRVNEQVlcIjogJ1R1ZXNkYXknLFxuICAgICAgICAgIFwiV0VETkVTREFZXCI6ICdXZWRuZXNkYXknLFxuICAgICAgICAgIFwiVEhVUlNEQVlcIjogJ1RodXJzZGF5JyxcbiAgICAgICAgICBcIkZSSURBWVwiOiAnRnJpZGF5JyxcbiAgICAgICAgICBcIlNBVFVSREFZXCI6ICdTYXR1cmRheScsXG4gICAgICAgICAgXCJTVU5EQVlcIjogJ1N1bmRheScsXG4gICAgICAgICAgXCJPVEhFUlwiOiAnT3RoZXInLFxuICAgICAgICAgIFwiRlJFRV9GSUVMRFwiOiAnRnJlZSBmaWVsZCcsXG4gICAgICAgICAgXCJWQUxJREFURVwiOiAnVmFsaWRhdGUnLFxuICAgICAgICAgIFwiU0tJUFwiOiAnU2tpcCcsXG4gICAgICAgICAgXCJNT1JOSU5HXCI6IFwiTW9ybmluZ1wiLFxuICAgICAgICAgIFwiQUZURVJOT09OXCI6IFwiQWZ0ZXJub29uXCIsXG4gICAgICAgICAgXCJNT1JOSU5HX0FMTFwiOiAnTW9ybmluZyAoYWxsKScsXG4gICAgICAgICAgXCJBRlRFUk5PT05fQUxMXCI6ICdBZnRlcm5vb24gKGFsbCknLFxuICAgICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBwdWJsaWMgdHJhbnNsYXRlKGwsIHdvcmQpIHtcbiAgICByZXR1cm4gdGhpcy5sYW5nW2xdW3dvcmRdO1xuICB9XG59XG4iXX0=