/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes,extraRequire}
 * tslint:disable
 */
import * as i0 from "@angular/core";
import * as i1 from "./konverso.module";
import * as i2 from "@angular/common/http";
import * as i3 from "@angular/common";
import * as i4 from "./konverso.service";
import * as i5 from "@angular/forms";
var KonversoModuleNgFactory = i0.ɵcmf(i1.KonversoModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, []], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i2.HttpXsrfTokenExtractor, i2.ɵangular_packages_common_http_http_f, [i3.DOCUMENT, i0.PLATFORM_ID, i2.ɵangular_packages_common_http_http_d]), i0.ɵmpd(4608, i2.ɵangular_packages_common_http_http_g, i2.ɵangular_packages_common_http_http_g, [i2.HttpXsrfTokenExtractor, i2.ɵangular_packages_common_http_http_e]), i0.ɵmpd(5120, i2.HTTP_INTERCEPTORS, function (p0_0) { return [p0_0]; }, [i2.ɵangular_packages_common_http_http_g]), i0.ɵmpd(4608, i2.HttpXhrBackend, i2.HttpXhrBackend, [i3.XhrFactory]), i0.ɵmpd(6144, i2.HttpBackend, null, [i2.HttpXhrBackend]), i0.ɵmpd(4608, i2.HttpHandler, i2.ɵHttpInterceptingHandler, [i2.HttpBackend, i0.Injector]), i0.ɵmpd(4608, i2.HttpClient, i2.HttpClient, [i2.HttpHandler]), i0.ɵmpd(4608, i3.NgLocalization, i3.NgLocaleLocalization, [i0.LOCALE_ID]), i0.ɵmpd(4608, i4.KonversoService, i4.KonversoService, ["__NgxKonverso__", i2.HttpClient]), i0.ɵmpd(1073742336, i5.ɵangular_packages_forms_forms_q, i5.ɵangular_packages_forms_forms_q, []), i0.ɵmpd(1073742336, i5.ɵangular_packages_forms_forms_d, i5.ɵangular_packages_forms_forms_d, []), i0.ɵmpd(1073742336, i5.FormsModule, i5.FormsModule, []), i0.ɵmpd(1073742336, i2.HttpClientXsrfModule, i2.HttpClientXsrfModule, []), i0.ɵmpd(1073742336, i2.HttpClientModule, i2.HttpClientModule, []), i0.ɵmpd(1073742336, i3.CommonModule, i3.CommonModule, []), i0.ɵmpd(1073742336, i1.KonversoModule, i1.KonversoModule, [[3, i1.KonversoModule]]), i0.ɵmpd(256, i2.ɵangular_packages_common_http_http_d, "XSRF-TOKEN", []), i0.ɵmpd(256, i2.ɵangular_packages_common_http_http_e, "X-XSRF-TOKEN", [])]); });
export { KonversoModuleNgFactory as KonversoModuleNgFactory };
//# sourceMappingURL=data:application/json;base64,